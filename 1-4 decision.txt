пункт a) корректно. a = ( ( ( b + ( c * d ) ) << 2 ) & 8 )
переменной a присвивается ( результат побитового умножения ( побитового сдвига ( суммы значений ( переменной b ) и ( произведения переменной c на переменную d ) ) на ( число 2 ) влево ) и ( числа 8 ) ).

пункт б) некорректно, т.к. если бы здесь можно было расставить скобки, то они стояли бы так: a & ( 077 |= 3 ), но слева от операции присваивания |= не может стоять число.

пункт в) корректно. ( a == b ) || ( ( a == c ) && ( c < 5 ) )
это результат дизъюнкции ( проверки равенства a и b ) и ( конъюнкции ( проверки равенства a и c ) и ( проверки того, что c меньше 5 ) ).

пункт г) корректно. c = ( x != 0 )
переменной c присваивается ( результат проверки того, что x не равно 0 ).

пункт д) корректно ( 0 <= I ) < 7
это результат сравнения на меньше между ( сравнением на меньше либо равно между 0 и I ) и 7.
Так как результат первой скобки может быть равен только либо 0 либо 1, то это всегда меньше, чем 7, то есть результат всего выражения всегда будет равен 1.

пункт е) корректно 1 , ( 2 + 3 )
это соответствует записи expression, assignment-expression из продукции для выражения из стандарта ansi-c99, что в свою очередь соответствует primary-expression , additive-expression. 

пункт ж) некорректно. a=-1++b--5 это не имеет смысла, здесь подряд записанные плюсы и подряд записанные минусы воспринимаются как инкремент и декремент, а бинарных операторов нет и это плохо.

пункт з) корректно.  a = ( ( ( - 1 ) + ( + b ) ) - ( - 5 ) )
Из расстановки скобок видно, что тут происходит.

пункт и) корректно.  a = ( b == ( c++ ) ).
здесь переменной a присваивается ( результат проверки на равенство == ( переменной b ) и ( инкрементированной переменной c ) ).

пункт к) корректно.  a = ( b = ( c = 0 ) )
здесь сначала присваивается с = 0, затем b = c, затем a = b.

пункт л) корректно. ( a[4][2] ) *= ( ( * b ) ? ( c ) : ( ( *d ) * ( 2 ) ) )
из расстановки скобок видно, что тут происходит.

пункт м) корректно ( a - b ) , ( c = d )
это примерно то же самое, что в пункте е)

пункт н) корректно *p++
здесь происходит разыменование указателя p, а потом p инкрементируется

пункт о) корректно *( --p )
здесь происходит разыменование указателя декрементированного p.

пункт п) корректно только в том случае, если а - экземпляр какого-нибудь специального класса, в котором инкремент как-то по-особому переопределён. ++((++(a--))) 

пункт р) (-++++а)-- как и в пункте п)

пункт с) ++а-- как в пункте п)

пункт т) корректно (int*)(p->m)
это приведение к int-овому указателю поля m в структуре p.

пункт у) корректно *(p.m) 

это разыменование указателя p.m

пункт ф) корректно *(a[i])
это разыменование указателя a[i].

